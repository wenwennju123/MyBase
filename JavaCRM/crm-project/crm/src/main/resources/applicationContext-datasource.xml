<?xml version="1.0" encoding="UTF-8"?>

<!--添加命名空间：context，aop，tx，mvc-->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
                           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
                           http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!--配置druid数据源，使用property引入外部文件-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>
    <!--配置SqlSessionFactoryBean
        注入mybatis核心文件配置，指定包的别名，路径，注入数据源-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--注入数据源-->
        <property name="dataSource" ref="dataSource"/>
        <!--指定mybatis核心配置文件-->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <!--指定包别名路劲，指定pojo文件夹-->
        <property name="typeAliasesPackage" value="com.leowork.crm.settings.entity"/>
    </bean>
    <!--配置mapper扫描配置器，指定mapper文件夹
        用来扫描mapper接口，动态生成代理类-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.leowork.crm.settings.mapper,
                                            com.leowork.crm.workbench.mapper"/>
    </bean>
    <!--配置事务管理器，绑定数据源-->
    <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!--启用事务注解驱动-->
    <tx:annotation-driven transaction-manager="txManager"/>
    <!--配置通知，具体的增强代码，关联事务管理器
        xml配置事务管理通知与切点表达式与切面-->
    <tx:advice id="txAdvice" transaction-manager="txManager">
        <!--配置通知的相关属性-->
        <tx:attributes>
            <!--配置事务的各种属性，方法名可以模糊匹配-->
            <tx:method name="transfer" propagation="REQUIRED" rollback-for="java.lang.Throwable"/>
            <tx:method name="save*" propagation="REQUIRED" rollback-for="java.lang.Throwable"/>
            <tx:method name="delete*" propagation="REQUIRED" rollback-for="java.lang.Throwable"/>
            <tx:method name="update*" propagation="REQUIRED" rollback-for="java.lang.Throwable"/>
            <tx:method name="modify*" propagation="REQUIRED" rollback-for="java.lang.Throwable"/>
            <tx:method name="query*" read-only="true"/>
            <tx:method name="find*" read-only="true"/>
            <tx:method name="get*" read-only="true"/>
            <tx:method name="select*" read-only="true"/>
        </tx:attributes>
    </tx:advice>
    <!--配置切面-->
    <aop:config>
        <!--配置切点，切点表达式，模糊匹配-->
        <aop:pointcut id="txPointcut" expression="execution(* com.leowork.crm.settings.service..*(..))"/>
        <!--配置切面，就是通知+切点，可以使用order属性指定不同切面之间的级别，也可以直接使用pointcut属性写切点表达式-->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut" order="1"/>
    </aop:config>
    <!--开启aop自动代理.扫描@Aspect注解，有则生成代理，
    属性proxy-target-class="true" 表示强制全部使用CGLIB动态代理-->
    <aop:aspectj-autoproxy proxy-target-class="true"/>

</beans>