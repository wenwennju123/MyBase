package com.leowork.crm.workbench.mapper;

import com.leowork.crm.workbench.entity.Activity;

import java.util.List;
import java.util.Map;

public interface ActivityMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb1_activity
     *
     * @mbg.generated Fri Sep 01 18:51:55 CST 2023
     * @return count
     */
    int deleteByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb1_activity
     *
     * @mbg.generated Fri Sep 01 18:51:55 CST 2023
     * @return count
     */
    int insert(Activity row);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb1_activity
     *
     * @mbg.generated Fri Sep 01 18:51:55 CST 2023
     * @return count
     */
    int insertSelective(Activity row);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb1_activity
     *
     * @param id 用户id
     * @mbg.generated Fri Sep 01 18:51:55 CST 2023
     * @return Activity
     */
    Activity selectByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb1_activity
     *
     * @mbg.generated Fri Sep 01 18:51:55 CST 2023
     * @return count
     */
    int updateByPrimaryKeySelective(Activity row);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb1_activity
     *
     * @mbg.generated Fri Sep 01 18:51:55 CST 2023
     * @return count
     */
    int updateByPrimaryKey(Activity row);

    /**
     * ***************************************************************************************
     * 保存提交的市场活动信息
     * @param activity 市场活动信息
     * @return 影响记录条数
     */
    int insertActivity(Activity activity);

    /**
     * 根据查询条件，分页查询活动信息
     * @param map 查询条件
     *
     *
     * @return 活动信息表
     */
    List<Activity> selectActivityByConditionForPage(Map<String, Object> map);

    /**
     * 根据条件查询符合条件的市场记录总条数
     * @param map 查询条件
     * @return 活动信息表
     */
    int selectCountOfActivityByCondition(Map<String, Object> map);

    /**
     * 根据id 删除市场活动记录
     * @param ids 需要删除的id数组
     * @return 影响记录条数
     */
    int deleteActivityByIds(String[] ids);

    /**
     * 根据id查询市场活动记录
     * @param id 市场活动记录id
     * @return 封装了市场活动记录信息的实体类对象
     */
    Activity selectActivityById(String id);


}