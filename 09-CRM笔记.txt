技术复习：servlet，jsp(运行原理，内置对象)，el，jstl，springMVC，jQuery标签选择器

CRM阶段简介
        web项目的开发，分析，设计，编码，测试（是从其他公司中买的还未上线的版本）
        编程思想与编程习惯  维护 功能分析 实现逻辑

技术架构：（项目经验 重点 解决实际问题的顺序，每个技术点解决对应的问题 面试回答的调理）
        视图层 view
	展示数据，和用户交互
	html，css，javascript，bootstrap(ext/easyUI)，jsp(严格算后端)，vue，elementui，jquery选择器，函数，ajax，组件的封装，数据的传递，美观的效果，
        控制层 controller
	控制业务处理流程，本身不处理业务。
	接收请求，以及请求中的参数，进行封装
	servlet(doGet，doPost)，springMVC(dispatcherServlet 中央控制器 调用不同的controller 自动封装 @ResponseBody )，(webwork，strust1，strust2)
        业务层 service
	处理业务逻辑，AOP，动态代理JDK CGLIB（交叉业务，通用代码），事务管理，日志管理，
	JavaSE，工作流（activiti，JBPM）
        持久层 dao mapper
	操作数据库
	jdbc，mybatis(ibatis)(hibernate自动生成sql语句，资源消耗高，不一定最优，服务器压力大，损失了灵活性与效率(部分老项目仍在使用))，连接池，ORM，
	(微服务，每一个功能做一个项目，谁需要谁来调用，小巧灵活)
	tb1_table------pojo
        整合层 spring(跨层)
	维护类资源，维护数据库资源
	spring整合所有的框架，解耦合，IoC，工厂类，容器，工厂模式，单例模式，AOP，(ejb，太笨重，corba，更早期)

CRM项目：技术整合综合应用
    经验！！！
    开发，需求分析，测试，测试部门，问题处理
    研发，研发部门，部门配合，代码管理，任务分配，人员管理
    对软件公司和软件开发有一定的了解
    对CRM项目的了解，功能，核心业务，不同功能对应解决的问题与客户群体，实现原理，技术应用
    独立完成CRM项目核心业务的开发，技术的回顾与熟练
    掌握互联网基础课，Linux，redis，git

模拟企业(高新企业，技术型)中项目开发流程
        软件开发企业的组织结构：
	研发部(开发部)程序员(30-40人中等) 资深-高级-中级-初级  开发年限
	        项目组长 经理 10人一组-----小组长 5人一组-----组员-----以项目组为单位
	        美工----前端，UI，图片类，前端界面三件套vue框架等还原图片效果，一个公司多个项目公用美工(类似效果图组)
	        DBA----数据库管理员，各种数据库底层原理，语句优化，海量数据(大公司才有几个DBA)
	测试部(测试人员配比5：1 项目越大测试越多)
	        极端情况测试，bug会对应到功能作者，和研发部之间矛盾与合作调节(常打交道)
	        黑盒测试(功能) 白盒测试(代码) 
	实施部
	        买服务器，实际使用，高并发，硬件测试，应用服务器软件(weblogic，websfire)，帮助客户服务器搭建
	        中小型企业可选兼职，按次收费
	产品部
	        设计产品功能，目标功能与目标客户，行业沉淀，提需求(常打交道)
	运维部
	        维护用户关系，软件使用，资源监控，解决问题
	市场部
	        谈项目，维护客户，关系，招标投标，做标书，技术图纸(打交道)
	管理，财务，人事，销售。。。
        软件开发声明周期：
	纯写代码时间约占项目开发周期的五分之二，基本不会超过一半
	客户可能是政府机构，金融机构，私人企业等
	1、招标投标(做标书，时常约几个月，)
	        甲方：出钱提要求
	        乙方：软件公司
	2、可行性分析
	        投入与产出，时间成本，人力成本，技术水平(技术总监，架构师)，外包
	3、需求分析
	        产品经理，需求调研，到客户现场业务骨干，(界面，输入框，交互。。。)合理的需求，符合公司技术水平，资源消耗与效果的平衡，
	        经典：甲方不知道自己要什么，比较漫长，比较筛选，展示案例成品项目原型等，界面，功能，吞吐量等等(要甲方签字定需求)，交流
	        前台静态模拟功能界面原型，展示效果(有具体的展示更好沟通，确定需求)，修改也只改页面，直至签字确定需求与开发阶段
	        确认需求文档(十分详细，几百甚至几千页，输入输出产入产出)(客户验收，测试)
	        之后将静态原型，改为动态页面，与后台交互
	4、分析与设计
	        模块，功能，类，表，的设计(架构师，技术总监)
	        整体性，扩展性，具体问题
	  ----物理架构设计(物理架构设计，部署在什么物理容器介质(服务器)上，数据存储在什么物理介质，性能，
	        应用服务器
		(Tomcat小型免费中小型企业应用可以使用))
        	        	(weblogic商业收费性能更强bea--->oracle) tomcat支持的技术比较少 weblogic基本全都支持（国家税务方面都是weblogic）
	       	 (websphere ibm开发的 中央电视台中使用的服务器)
	        	jboss(redhat)、resin(微软 用的少 绑定微软平台 windows 移植性差)------浏览器兼容
	        	web  javaee(13中协议、技术  servlet jsp xml jdbc  mq jpa。。。) 遵循协议即可开发，使用，部署项目
	        	            (完整目录结构，放入webapp目录。手动部署，自动部署)
        	        	服务器一般都使用linux系统
	        数据库服务器  
		sqlServer
		mysql
		oracle
		DB2
		MongoDB
		Redis
		达梦（国产）
	   ----逻辑架构设计(代码组织，软件设计，代码分层)
		四层 视图层 控制层 业务层 持久层 数据库
		技术选型 java(跨平台 可移植) c c++ php .net
	   ----项目设计
		物理模型设计，模拟现实数据抽象为代码中的对象，那些表，哪些字段，字段的类型和长度，以及表与表之间的关系(大项目上百张表)(从需求文档中提取创造)
		        表的改动牵扯十分大(实体类属性，sql语句，mapper，service属性，controller，页面 全部需要修改)（powerdesigner）
		逻辑模型设计：那些类，哪些属性和方法，方法的参数和返回值，类和类之间的关系，依赖关系(rantional rose)
		界面设计：企业级应用（内网，数据量，并发量不会太大，界面简介高效）
			互联网应用，炫酷，高并发
		算法设计：复杂业务处理
	5、搭建开发环境
	        团队合作开发git，创建项目，添加jar包，添加配置文件，添加静态页面，工具类，添加公共类以及其他资源；能够正常启动运行
	6、编码实现
	        根据开发项目的人员技术层次要求招聘
	        领任务，分配任务
	        前期设计的越完善，编码开发越容易，只要不修改或增加需求，需要增加补充协议或者额外修改费
	7、测试阶段：（压力大）
	        测试---编码----测试----交替进行
	8、试运行阶段(预备上线)
	        实施部，让客户买服务器软硬件，配置，集成安装软件，项目打war包部署到服务器上，一到两周。并编写使用手册，说明，培训客户使用
	        (外包可能有项目合同，以项目为单位招人裁人)
	        正常软件公司都会安排工期，从一个项目组到另一个项目组
	9、上线(实施部)
	        清除测试时产生的垃圾数据，部署正式版本，用户结清尾款（一般按合同分开发阶段）等
	        （一年的项目 招投标1-2月 设计阶段约3-4月 编码测试阶段约4月 上线1-2月 项目寿命约五年）
	10、运维：大项目（长期）
	        在甲方客户服务器机房旁边开独立办公室，1-2人留驻，处理甲方使用中遇到的问题，（五年的项目约需要留驻两年）
	        项目初期数据量少，使用体验好。随着使用年限增加，数据量增加，项目运行效率降低，项目需要升级换代
	11、文档编写
	        每一个阶段都有文档输出，（投标标书，可行性分析报告，需求文档，架构设计文档，项目设计文档，设计表的.pdm
	        设计类的.pdl文件 项目原型 算法设计文档 技术架构说明 代码注释doc文档 测试用例文档 使用手册 实施手册）
	        都可能是验收标准之一。需求设计是最关键的，逻辑模型设计是最难的（上线时可能通宵补文档）
	本CRM项目 8个月开发，人员5-10人变动 最后补文档借人
	(小公司 全栈 阶段可能不明显)

CRM核心业务介绍（需求分析阶段）
        明确哪些模块，哪些功能，功能与功能之间分析
        1、CRM项目的简介：
	Customer Relationship Management 客户关系管理系统（员工，物料，园区等等管理系统）
	通常为企业级应用，部署在公司内网（传统软件 区别于互联网）
	客户关系作为资源需要管理，通常给销售和贸易型公司来使用(房地产 建材 美妆 等公司) 在市场部，销售部，服务部中各个环节来维护客户关系
	宗旨：增加新客户，留驻老客户，把已有客户转化为忠诚客户
        2、CRM是一类项目（最初也是由国外传入国内 微软也有CRM事业部专门来做等等 国内例如 用友 金蝶 志邦国际等 也有专门为客户量身定制CRM的公司）
                不同行业的公司使用的系统也不同，销售模式理念等不同，对应的功能也不同，一般都是定制
	此CRM项目目标客户为大型进出口贸易公司，大宗商品进出口贸易（商品受国家管制，必须有国家审批的资质才可以购买）
        3、CRM项目的核心业务：
	系统管理功能：保证业务管理功能正常安全运行，并不会直接参与处理业务数据（用户登录，登录验证，安全退出，下拉列表等）
		给超级管理员，开发和运维人员使用
	业务管理功能：处理业务数据 
		市场活动：设计市场营销活动（市场部）可以查看当前的活动，创建，修改，删除，导出等。设计活动，对活动的评价以及对评价的评价
        		线索：活动获取联系方式，销售部联系使用(大部分会无效线索 初级销售打电话使用的)，增加线索，字段设计
		        对于有购买意愿的线索，将其转换到下一级高级销售阶段，加入客户和联系人
        		客户：高级销售，跟踪客户（公司）
		联系人：高级销售，跟踪联系人，有效地区分联系（客户提的要求）
       		交易（商机）：高级销售确认客户具有明确购买意向，将其升级为交易，由最高级销售人员创建交易（金额时间商品），
		        并跟踪交易进度，各个进度均有专人细化跟踪，确保交易成功。可以更好的维护客户关系，更好地取人和统计交易的各个阶段
        		售后回访（客服）：客服任务表task，联系的任务，时间等。妥善安排售后回访。
		（主动提醒功能：重要客户，预约时间，会弹窗提醒-----后台新加个线程记录时间，定时任务，websocket弹窗）
		（解决1：创建预约的时候给后台一个定时任务（浏览器或页面关闭过就无法实现）解决：长链接协议https tcp/ip）（暂不实现）
        	web开发：前台发送请求--->后台java处理---->反馈到前台    http协议，短协议，无连接协议
	        也叫请求驱动的流程，也就是前台不发请求，后台不可能打回数据，
        		统计图表（管理）：将市场活动那个，线索，客户，联系人，交易等数据实施生成图表，使其更加直观的浏览，学习echarts等
	配套的业务文档都有十分明确的描述，包括配套截图，需要完善。简历展示需要完善。
	前期设计的越完善，代码开发越简单。项目的根本在于分析与设计，分析需求与功能

需求分析，整体性设计，物理架构，逻辑架构设计暂不描述
CRM物理模型设计：
        表设计：字段以及字段的类型与长度，表与表之间的关系
        逻辑模型设计：类，类的属性与方法，方法的参数和返回值，以及类和类之间的关系。一般由程序员编写功能时自行设计
        界面设计：项目原型
        算法设计：并发量小，算法占比小
        一般工作中最重要的是需求文档与项目原型，操作哪些表（权限）文档

CRM项目的表结构：
        读需求文档与项目原型进行分析，哪些数据需要处理
        tb1_user 用户表 用来验证用户名密码登录 登录成功or失败

        tb1_dic_type 数据字典类型表 对应下拉列表的类型，与下表对应（外键）
        tb1_dic_value 数据字典值表，用来存储下拉列表、复选框等中供选择的信息，可以在网页端被后台维护
        
        tb1_activity 市场活动表 存储有关市场营销活动的数据
        tb1_activity_remark 市场活动备注表 存储对活动的备注与评论
        
        tb1_clue 线索表 
        tb1_clue_remark 线索备注表

        tb1_clue_activity_relaction线索和市场活动的关联关系表
        
        tb1_customer 客户表
        tb1_customer_remark 客户备注表
        
        tb1_contacts 联系人表
        tb1_contacts_remark 联系人备注表
        
        tb1_contacts_activity_relation 联系人和市场活动的关联关系表

        tb1_transaction 交易表（最重要的表 记录每个交易各个阶段谈判历程关键信息）
        tb1_transaction_remark 交易备注表
        tb1_transaction_history 交易历史表
        
        tb1_task 客服任务表（本次不设计）
        
        每一个字段的含义，建表脚本中都应备注好
        1）主键字段：主键唯一非空，默认添加索引，（定义：在数据库表中，如果有一组字段能够唯一确定一条记录，则可以把他们设计成表的主键字段）
        	可以存在联合主键，十分不建议，十分影响操作。推荐使用自然主键，没有业务含义的字段，uuid，identity，
	主键字段的类型和长度：由主键值的生成方式来决定，bigint或varchar
        	主键值的生成方式：1、自增主键，借助数据库自身主键生成机制，主键定义为数值型，长度由数据量决定，运行效率低，开发效率高（小规模、测试）；
			        底层主键是自增序列（auto-increment sequence）”的机制来实现，是一个特殊的计数器，在查新纪录时自动增加
			        MySQL会维护一个内部计数器，用于生成下一个自增值。每次每次插入新记录时，该计数器都会自动增加。（高并发不如java效率高）
			        自增主键的值是在插入时生成的，并不是在创建表时就确定的。（避免多线程并发冲突会有自增锁，表级锁，批量添加有阻塞，效率低下）
			        此外，自增主键的值是表级别的，而不是全局唯一的。也就是说，不同表中的自增主键值可以重复。
		 常用-----2、assighed：签名，由程序员编程手动生成主键值，唯一，非空，按照对应的算法编写、拼接。
			        例如UUID(32位字符串)、雪花算法、时间戳、MAC地址、DCE安全标识符、MD5散列算法、完全随机的伪随机数生成算法、命名空间和名称、
			            SHA-1散列算法、hi/low算法
			        可以下载对应的工具类（java.util 自带了uuid算法算法 可以高并发）故此使用uuid生成主键，主键均为32位定长字符串类型，char(32)
        		               3、共享主键，不推荐。主键值的类型和长度，由另一张表(依赖的父表)的主键的类型和长度来决定
        		               4、联合主键：不推荐，由多个字段的类型和长度联合决定
        2）外键字段：用来确定表与表之间的关联关系，大项目几百张表外键需要极其谨慎（现实世界不是孤立存在，数据和数据之间存在关系）
	一对多：表A中的一条记录对应另一个表B中的多条记录，B表中的一条记录只能对应另一个表A中的一条记录
	        	A表称为一（父表）    B表称为多（子表）
		一对多 两张表 多的表加外键
		向子表中添加数据时，必须要保障其父表中对应的数据存在，故添加数据时，先添加父表记录，再添加子表记录。删除数据时，先删除子表记录，再删除父表记录（级联删除）
		查询时，可能会进行关联查询，左右外连接，自连接，非等值链接
		内连接：查询所有符合条件的数据，并且要求结果再两张表中都有相对应的记录
		外连接：左右表示主从关系，以左外连接为例，主表在左，从表在右。查询左侧表中所有符合条件的数据，即使在右侧表中没有相对应的记录也可以查出，
		全外连接：满足一个就可以都都查出来
		根据要查询的数据进行选择，如果外键不能为空，则优先使用内连接（效率更高）。如果外键可以为空，假如只需要查询在另一张表中有响应的记录，使用内连接。
		    假如只需要查询在坐标中有符合条件的记录，使用外连接

	多对多：表A中的一条记录可以对应另一个表B中的多条记录，B表中的一条记录也可也i对应另一个表A中的多条记录
		举例学生表A与课程表B
		多对多三张表，关系表（只有）两个外键（引用两个表的主键，均为非空唯一）描述A、B表的对应的关系。两张表A，B为父表，在添加关系表子表relation记录
		添加数据时，先添加父表记录，再添加子表记录。
		删除数据时，先删除子表记录，再删除父表记录
		查询数据时，可能会进行关联查询

	一对一：表A中的一条记录只能对应另一个表B中的一条记录，B表中的一条记录也只能对应另一个表A中的一条记录
        		共享主键：不推荐，耦合度太高（先添加先产生的表，再添加后产生的表记录。查询就无需进行链接查询）
        		唯一外键：举例用户信息（账号密码）与用户详细信息（性别，身份证号，手机号码，邮箱等等）。在从表中添加唯一约束的外键，对应主表的主键（主键自带唯一约束）
		（一对一视作特殊的一对多，操作相同）

        3）关于日期和时间的字段
	java----Date
	mysql----date time datetime
           	可以添加自定义类型转换器，或@DateTime注解修饰实体类字段，或者都用字符串统一处理
        	定长字符串 char(10) yyyy-MM-dd
        	定长字符串 char(19) yyyy-MM-dd HH:mm:ss

创建CRM的数据库表实例
    create  database；
    运行SQL脚本
    在idea中新建maven webapp项目，补全目录结构，统一编码格式UTF-8
    添加依赖jar包
    添加配置文件
    web项目先加载web.xml 然后在其中读取spring springmvc mybatis的配置文件并加载
    webapp根目录下的网页可以直接访问，不安全，jsp等页面应该放在WEB-INF目录下，是受保护的目录
    外界访问需要先访问controller，然后跳转到对应页面（给controller分配url，并验证登录用户合法与否）
    添加静态页面资源
    将项目部署到tomcat上  http://127.0.0.1:8080/crm
    合作开发：Git
    开发顺序：一般是先开发被依赖的功能，较为底层的功能，确保可靠性。之后开发依赖其的功能，

*********************************************************************
最难的是分析与设计，编码是较为简单的（故此专业名叫软件设计）
*********************************************************************
一、开发首页以及登录功能
    首页，欢迎页
        1）分析需求：严格参照需求文档
        2）分析与设计：RationalRose 绘制流程图
        3）编码实现：从底层被调用被依赖的开始编写，往往越靠近数据库越底层，越靠近用户越顶层
        4）测试：

一般情况下，一个资源目录对应一个controller，当目录不同时，需要新建一个controller来处理控制

根据具体的业务功能设计，来设计包的结构，对类进行分类清晰的管理，方便合作开发以及维护

类的创建是根据需求推动者创建的，不可随意创建

Controller不处理业务，而是控制流程（控制器）。由controller决定调用哪个service来处理业务，并将数据封装传递下去

复习：同步请求，异步请求
    同步请求：浏览器窗口发出的请求，响应信息返回到浏览器窗口，进行**全局**刷新
    异步请求：ajax发送异步请求，响应信息返回到ajax的回调函数，既可以进行全局刷新，也可以进行局部刷新

复习：MyBatis逆向工程
    根据表，生成mapper层的三部分代码：实体类，mapper接口、映射文件
    创建另一个工程 专门用于逆向工程
    添加插件 mybatis-generator-maven-plugin (插件可以看作一种可以独立运行的jar包，拥有入口程序来让maven调用)
    通过配置文件，提供数据源信息（数据库，目标表），与生成代码保存的目录
    执行程序，生成实体类entity Mapper接口与Mapper.xml配置文件

完善生成的Mapper接口，编写业务所需的接口方法与对应的xml配置文件sql语句

使用jQuery获取指定元素的指定属性的值
    选择器.attr("属性名");    主要用来获取 值不是 true 或者 false 的
    选择器.prop("属性名");    主要用来获取 值是 true/false 的
        例如： checked selected readonly disabled

代码一定要注意封装与复用性
    参数一定不要写死，难以维护和复用

将控制层 controller 代码中处理好的数据，传递到视图层 jsp
    使用作用域传递
        页面域 pageContext 在同一个页面中传递，多用来在标签之间传递数据（一个标签后台对应一个类<c:if> <c:each> 等等）
        请求域 request 一次请求一个，请求转发可携带请求域，在同一个请求过程中传递数据
        会话域 session 一次会话一个，只能超时过期或手动销毁，可以用来在多个请求中传递数据，底层由cookie实现，可以由浏览器持久化到本地，session存储到服务器，和cookie对应
        应用域 application 一个web应用一个，用于存储所有用户共享并且不会被修改的数据，并且长久频繁使用
    jsp都有对应的内置对象

beforeSend:function(){}发送ajax请求之前，执行的函数，状态码为1，即为open方法已经调用，但是请求还未发送时
    原生ajax核心是XMLHttpRequest有0-4状态码readyState
    0:请求未初始化 unsent
    1:服务器链接已建立 opened
    2:请求已收到 headers_received
    3:正在处理请求 loading
    4:请求已完成且响应已就绪 done
    该函数的返回值T/F可以决定ajax是否真的向后台发送请求 True 正常发送 False 取消发送

jQuery事件函数的用法：
    选择器.click(function(){
        js代码;
    });
    给指定的元素添加指定的事件

    选择器.click();
    给指定的元素模拟发生一次事件

记住密码功能：
    访问login.jsp  后台html 如果上次选择记住密码，自动填入密码。否则不填。
    如何判断上次是否记住用户，
        上次登录成功时，判断是否需要记住密码，需要则写入cookie，将用户信息存入cookie。
            如果不需要记住密码，则删除cookie，（设置超时时间为0）
        下次登陆时，判断该用户是否持有cookie，有则自动填写账号密码，从cookie中取用

****************************************************************************************
Token令牌
下面是一个在Java Web应用中生成、发送和验证令牌的完整流程的示例：

生成令牌：
public class TokenUtil {
    private static final String SECRET_KEY = "your_secret_key";
    private static final long EXPIRATION_TIME = 86400000; // 24小时
    // 生成令牌
    public static String generateToken(String userId) {
        Date now = new Date();
        Date expiration = new Date(now.getTime() + EXPIRATION_TIME);
        String token = Jwts.builder()
                .setSubject(userId)
                .setIssuedAt(now)
                .setExpiration(expiration)
                .signWith(SignatureAlgorithm.HS256, SECRET_KEY)
                .compact();
        return token;
    }
}

发送令牌：
在登录成功后，将令牌发送给客户端。这可以通过将令牌添加到响应的头部中来完成。
public class LoginController {
    public void loginSuccess(HttpServletResponse response, String userId) {
        String token = TokenUtil.generateToken(userId);
        // 将令牌添加到响应头部中
        response.setHeader("Authorization", "Bearer " + token);
    }
}

验证令牌：
在需要验证令牌的请求中，从请求头中获取令牌，并进行验证。
public class TokenUtil {
    private static final String SECRET_KEY = "your_secret_key";
    // 验证令牌
    public static String verifyToken(HttpServletRequest request) {
        String token = request.getHeader("Authorization");
        if (token != null && token.startsWith("Bearer ")) {
            token = token.substring(7);
        } else {
            // 令牌格式错误
            return null;
        }
        try {
            Claims claims = Jwts.parser()
                    .setSigningKey(SECRET_KEY)
                    .parseClaimsJws(token)
                    .getBody();
            String userId = claims.getSubject();
            return userId;
        } catch (Exception e) {
            // 令牌无效或过期
            return null;
        }
    }
}
在上述代码中，我们使用了JJWT库来生成和验证令牌。在生成令牌时，我们设置了令牌的主题（subject）、签发时间（issuedAt）和过期时间（expiration），
    并使用指定的密钥进行签名。在发送令牌时，我们将令牌添加到响应头部中。在验证令牌时，我们从请求头中获取令牌，并进行验证。

验证流程如下：
    客户端在登录成功后，服务器生成一个令牌，并将其添加到响应头部中发送给客户端。
    客户端在后续的请求中，将令牌放在请求头的Authorization字段中，使用Bearer方案进行传递。
    服务器在接收到请求后，从请求头中获取令牌，并调用verifyToken方法进行验证。
    verifyToken方法从请求头中获取令牌，并进行格式验证。然后，使用相同的密钥对令牌进行解码，并获取令牌中的主题信息。
    如果令牌验证通过，服务器可以根据主题信息进行相应的操作，如获取用户信息、授权等。
        需要注意的是，在验证令牌时，可能会出现令牌无效或过期的情况。在示例中，我们使用了异常捕获来处理这些情况，并返回相应的结果。
    你可以根据实际需求进行适当的处理。另外，密钥的保护也是非常重要的，你需要确保密钥的安全性，避免泄露。

Token比cookie的安全性体现在以下几个方面：
    防止CSRF攻击：Token可以通过在请求头中添加自定义的字段进行传递，而不是在每个请求中自动包含在cookie中。
        这样可以防止跨站请求伪造（CSRF）攻击，因为攻击者无法获取到token的值。
    防止XSS攻击：XSS攻击是指攻击者通过注入恶意脚本来窃取用户信息或执行恶意操作。
        使用token来进行身份验证可以减少XSS攻击的风险，因为攻击者无法获取到token的值。
    隐藏敏感信息：Token通常只包含身份验证信息，而不包含用户的敏感信息。相比之下，cookie可能包含用户的敏感信息，
        如用户名、密码等。因此，使用token可以减少泄露敏感信息的风险。
    可控制性：Token可以设置过期时间，并且可以在服务端进行管理和撤销。相比之下，cookie的过期时间由浏览器控制，无法灵活地进行管理
******************************************************************************************
获取Cookie：
    使用java代码获取cookie（Http协议规定，只要发送请求，就会携带所有未过期的cookie）
        request.getCookies(); 获取所有cookie，然后遍历取出getName getValue，进行验证
    使用el表达式来获取cookie
        ${cookie.loginAct.value} 加上cookie前缀让el表达式不再从四个作用域中依次寻找，而是直接在请求头当中寻找，
        cookie对象的三个重要参数 name value maxAge

jstl标签 用于判断 流程控制
    <c:if test="${not empty cookie.loginAct and not empty cookie.loginPwd}">
        checked = true
    </c:if>
    <c:if test="${empty cookie.loginAct or empty cookie.loginPwd}">
        checked = false
    </c:if>

***********************************************************************************************
登录验证---拦截器
    过滤器：在web.xml中配置 简单业务场景使用，功能简单，时机较少
        implements Filter
            init
            destroy
            dpFilter
    拦截器：框架对Filter进行了二次封装，功能更强，时机更多
        在拦截器链中，可以定义多个HandlerInterceptor，它们按照注册的顺序执行

    提供拦截器类 继承 implements HandlerInterceptor
        preHandle 在处理器执行前被调用，可以进行一些前置处理操作。返回值为布尔类型，如果返回true，则继续执行后续的拦截器和处理器；
                    如果返回false，则中断执行链，不会继续执行后续的拦截器和处理器。
        postHandle 在处理器执行后、视图渲染前被调用，可以进行一些后置处理操作。可以对请求进行修改，但不能修改响应。
        afterCompletion 在整个请求完成后被调用，包括视图渲染完成。可以进行一些清理资源的操作。

*****************************************************************************************************
页面切割技术：
    <frameset>和<frame> 比较原始(重量级标签，底层占用字节数很高)
        <frameset cols="20%,60%,20%"> 按照 列 切割   rows 按 行 切割  只能切割页面
            <frame src="url1" name="111"> 显示页面
            <frame src="url2" name="222"> 显示页面
            <frame src="url3" name="333"> 显示页面
        </frameset>
        每一个frame标签就是一个独立的浏览器窗口，等效于多打开一个浏览器窗口，可以独立进行全局刷新，使用name来进行标识

----<div> 和 <iframe>
    切割后的每一个部分，可以独立进行全局刷新
    <div style="height:10%; width=20%">  div标签可以展示各种内容，但是无法独立显示网页
        <iframe href="url"> 显示页面
    </div>

在指定的iframe窗口中打开页面
	window.open("main/index.html","workareaFrame");
	可以分配对应的url给controller来完成跳转

*********************************************************************************************************
模态窗口
    window.open("url", "blank")  已过时，获取太过繁琐
    window.document.getElementById()      父窗口parent 子窗口children
    document.parent.getElementById()        document.children.getElementById()

模态窗口，而不是新开一个窗口，本质上是一个div（bootstrap添加了动态效果）并遮挡了下层的点击
    页面 x y轴决定位置，图层（z轴）上下决定显示遮盖顺序
    通过设置 z-index 来实现
    初始时，不显示模态窗口是因为z-index设置为负，需要显示时调整z-index>0即可，多层依照图层顺序
    由前台框架bootstrap来完成控制
    <div class="modal fade"

模态窗口的显示与隐藏控制：
    一：给控制的按钮或标签等添加 开关属性 data-toggle="modal" 所控制的目标模态窗口标识id data-target="   目标模态窗口id   "
    二：JS函数
        选择器(选中div).modal("show");  显示指定模态窗口
        选择器(选中div).modal("hide");  隐藏指定模态窗口
    三：标签属性 data-dismiss="" 单击后，自动关闭当前的模态窗口

注意：页面之间数据的交互

模态装口本质上时原来页面中的一个<div> 整个过程只有一个页面一个document对象，不存在跨页面的数据交互

*************************************************************************************************
JS中正则表达式
    语言，语法：定义字符串的匹配格式，可以用来判断制定的具体字符串是否符合匹配模式
    语法通则：
        1、 // 在js中定义一个正则表达式 var regExp = /...../;
        2、 ^ 匹配字符串的开头位置
            $ 匹配字符串的结尾位置
        3、 [] 匹配制定字符集中的一位字符
            var regExp = /^[abc]$/;
            var regExp = /^[a-z0-9]&/;
        4、 {}:匹配次数
            {m}: 匹配m次
            {m,n}: 匹配m次到n次
            {m,}: 匹配m次或更多次
        5、 特殊符号
            \d: 匹配一位数字，相当于[0-9]
            \D: 匹配一位非数字
            \w: 匹配所有字符，包括所有语言的字母，数字，下划线
            \W: 匹配非字符，上述的差集
            *: 匹配0次或多次，相当于{0,}
            +: 匹配1次或多次，相当于{1,}
            ?: 匹配0次或1次，相当于{0,1}

***************************************************************************************************
jQuery选择器获取对象后转换为dom对象
    $("#.....")[0]
    $("#.....").get[0]

对应举例取属性值的方法：
    let id = checkedId.val();
    let id = checkedId[0].value;
    let id = checkedId.get(0).value;

    /*赋值给select下拉列表，会自动匹配对应的下拉列表项进行选中*/

***************************************************************************************************
插件的使用与选择
    复杂的问题，并且与具体的业务关系较低。技术上可以方便移植，高度封装
前端插件：
    日历插件：bootstrap--datetimepicker
    使用步骤：
        下载并引入开发包（拷贝到webapp对应的目录）js或css代码
        将插件加载到jsp文件中 <link> <script>
    创建容器标签，复杂的表现效果多使用div标签作为容器
        <input type="text"> <div>
    容器加载完成后，对容器调用工具函数

先引入css样式表，再引入javascript脚本

先引入bootstrap框架
再引入bootstrap-datetimepicker插件
api地址 https://www.bootcss.com/p/bootstrap-datetimepicker/

dom中元素的id是唯一的
当需要选择多个元素时，可以定义class 类，使用类选择器选择多个元素，原有的值不动的情况，可以再加一个值
class可以有多个值，中间用空格隔开
<input type="text" class="form-control date" id="create-startDate">
类选择器
$(".date")
或者使用标签选择器，然后过滤name属性（先给目标标签添加name='date'属性）
$("input[name='date']")

*************************************************************************************************
查询数据时，能分开进行sql就分开
    更精细化的查询，使用更加灵活，避免浪费资源
    存在懒加载机制，完成部分步骤即可实现功能，无需全部进行查询

链接查询时，判断使用外连接还是内连接：
    首先看外键是否可以为空，不可以为空则优先使用内连接，效率更高（查询效果一样）
    看查询结果是否都要求在两张表中都要有相对应的记录
        可以为空的那张表作为副表（子表），不可以为空的作为主表（父表），进行外连接查询

表在设计时，一定要考虑好是否可以为空
    一定要根据需求确定字段的长度，不可以一律字符就255
    time一般19 yyyy-mm-dd hh:mm:ss
    date一般10 yyyy-mm-dd
    如果字符串长度确定不变，建议使用char而不是varchar

动态sql中 < 左尖括号 小于号 会冲突
    使用转义符
    &gt; >  greater than
    &lt; <  less than

MySql中的 limit 子句
LIMIT子句是在MySQL服务器端处理的，因此返回给客户端的结果集只包含指定的行数，并不会返回所有满足查询条件的结果。
这样可以减少网络传输的数据量，提高查询效率

***************************************************************************************
在Controller返回对象时，@ResponseBody
可以将 实体类java对象，map，list，数组，基本数据类型 自动转换为json格式 发送到前端
实体类对象 与 map 最常用

遍历JS代码中的变量，可以使用jQuery自带的each函数，
遍历jsp中java代码中的变量，可以使用JSTL标签库.jstl是java代码的封装版，是jsp被翻译成html代码时执行的。

在指定的标签中，显示jsp页面片段，
    选择器.html(jsp页面片段的字符串);     覆盖显示（清空原有的内容）
    选择器.text(jsp页面片段的字符串);     文字
    选择器.append(jsp页面片段的字符串);    追加显示
    选择器.after(jsp页面片段的字符串);
    选择器.before(jsp页面片段的字符串);

****************************************************************************************
函数(方法)
    什么情况下使用：
        完成某个特定功能的代码，反复频繁出现，将其封装为函数
        封装一些多次执行的，并且只是少数变量发生变化的操作
    函数的参数的定义：
        在编写并封装函数的过程中，有一个或多个数据 具体的值 无法确定，(一般是由函数的调用者提供，比如接收用户的输入，点击，选择等)
        将这些数据定义为函数的参数，形式参数。调用者传入 实际参数。
        调用者无法确定的参数为无效参数，不应写入函数形参列表中。

JS中定义参数，直接写参数名即可，会自动根据传入的数据类型进行转换（弱类型语言）
    function queryActivityByConditionForPage(pageNo, pageSize) { ... }

下拉列表--->用户选择切换---> change事件
翻页卡片---> 固定有的卡片： 首页 上一页  1  下一页 末页
            非固定： 根据总数据条数与每页显示条数计算页码卡片 上限显示10个
        若页码位于 1 页，则 首页 与 上一页 不可点击
    给所有的卡片 添加单击事件，完成页面选择（查询对用记录并展示）功能
可以使用插件完成对应的功能 分页： pagination  element等框架中均有组件
    bs_pagination

复习插件调用：
    引入包/依赖-----html-head
    提供容器，例如div-----html-body
    对容器调用工具函数-----JS代码

bs_pagination插件参数：
    {
        currentPage: 1,  //当前页号，初始页号，对应分页查询中的pageNo

        totalPages: 100, //总页数，必传参数
        rowsPerPage: 20,  //每页显示条数，对应分页查询中的pageSize
        totalRows: 2000,  //根据上两个参数可以计算得出，可以不写

        visiblePageLink: 5,  //设置最多可以显示的翻页卡片数，默认值为5

        showGoToPage: false,  //设置是否显示 “跳转到” 部分，默认为true
        showRowsPerPage: false,  //设置是否显示 “每页显示条数” 部分，默认为true
        showRowsInfo: false,  //设置是否显示记录信息，默认为true

        //每次返回切换页号之后的pageNo和pageSize。pageObj就代表这个参数对象整体，可以直接pageObj.currentPage 获取当前页号
        onChangePage: function(event, pageObj){  //用户每次切换页号时，执行此函数
            //Js Code
            alert(pageObj.currentPage);
        },

    }

************************************************************************************************
前端页面中元素分为两大类： 块元素 行元素 (行内块元素)
    块元素可以由以下标签实现：
        <div>：用于定义文档中的一个区块，常用于组织页面结构和样式。
        <p>：用于定义段落。
        <h1> - <h6>：用于定义标题，数字表示标题的级别，从大到小。
        <ul> 和 <ol>：分别用于创建无序列表和有序列表。
        <li>：用于定义列表中的每一项。
        <table>：用于创建表格。
        <form>：用于创建表单。
        <header>、<footer>、<section>、<article>、<aside>：用于定义页面的结构和语义。
        <blockquote>：用于定义长的引用。
        <hr>：用于创建水平线。
        块元素之间会有间距，可以使用css样式表中的margin属性来进行分隔
    行元素可以由以下标签实现：
        <a>：用于创建链接。
        <span>：用于定义文本的一小部分。
        <img>：用于插入图像。
        <input>：用于创建表单输入控件。
        <button>：用于创建按钮。
        <label>：用于标识表单元素。
        <select>：用于创建下拉列表。
        <textarea>：用于创建多行文本输入框。
        <abbr>：用于定义缩写。
        <acronym>：用于定义首字母缩写。
        <b>、<i>、<u>、<em>、<strong>：用于定义文本的样式和语义。
        这些标签可以用于创建不同类型的行元素，用于呈现页面内容的一部分。行元素通常用于内联元素，可以在一行中显示多个元素。
        行元素之间默认没有空行，可以通过设置各种间距或者背景颜色或者边框来控制

JavaScript 常用的系统函数并给出这些函数的参数、功能和返回值是非常耗时的。在这里我将列出50个常用的 JavaScript 系统函数，
并简要描述它们的功能。如果您对特定函数的参数、功能和返回值有疑问，请让我知道，我将会为您提供更详细的信息。

1. alert() - 参数：message（要显示的消息）；功能：弹出一个包含消息的警告框；返回值：undefined。
2. prompt() - 参数：message（提示消息）、default（默认值）；功能：弹出一个提示框，要求用户输入文本；返回值：用户输入的文本或 null。
3. confirm() - 参数：message（要显示的消息）；功能：弹出一个确认框，要求用户点击“确定”或“取消”；返回值：true（确定）、false（取消）。
4. console.log() - 参数：message（要打印的消息）；功能：在控制台打印消息；返回值：undefined。
5. parseInt() - 参数：string（要转换为整数的字符串）、radix（基数，默认为10）；功能：将字符串转换为整数；返回值：转换后的整数。
6. parseFloat() - 参数：string（要转换为浮点数的字符串）；功能：将字符串转换为浮点数；返回值：转换后的浮点数。
7. isNaN() - 参数：value（要检查的值）；功能：检查值是否为 NaN；返回值：true（是NaN）、false（不是NaN）。
8. isFinite() - 参数：value（要检查的值）；功能：检查值是否为有限数；返回值：true（是有限数）、false（是无穷大或NaN）。
9. String() - 参数：value（要转换为字符串的值）；功能：将值转换为字符串；返回值：转换后的字符串。
10. Number() - 参数：value（要转换为数字的值）；功能：将值转换为数字；返回值：转换后的数字。
11. Boolean() - 参数：value（要转换为布尔值的值）；功能：将值转换为布尔值；返回值：转换后的布尔值。
12. Array() - 参数：sizeOrItems（数组的长度或初始元素）；功能：创建一个新数组；返回值：新数组。
13. Object() - 参数：无；功能：创建一个新对象；返回值：新对象。
14. Date() - 参数：dateString（日期字符串）；功能：创建一个表示特定日期的对象；返回值：日期对象。
15. Math.random() - 参数：无；功能：返回一个0到1之间的随机数；返回值：随机数。
16. Math.round() - 参数：number（要四舍五入的数）；功能：将数四舍五入为最接近的整数；返回值：四舍五入后的整数。
17. Math.floor() - 参数：number（要向下取整的数）；功能：返回小于或等于给定数字的最大整数；返回值：向下取整后的整数。
18. Math.ceil() - 参数：number（要向上取整的数）；功能：返回大于或等于给定数字的最小整数；返回值：向上取整后的整数。
19. Math.max() - 参数：number1, number2, ...（要比较的数）；功能：返回给定数中的最大值；返回值：最大值。
20. Math.min() - 参数：number1, number2, ...（要比较的数）；功能：返回给定数中的最小值；返回值：最小值。
21. Math.abs() - 参数：number（要取绝对值的数）；功能：返回给定数的绝对值；返回值：绝对值。
22. Math.pow() - 参数：base（底数）、exponent（指数）；功能：返回底数的指定次幂；返回值：计算结果。
23. Math.sqrt() - 参数：number（要计算平方根的数）；功能：返回给定数的平方根；返回值：平方根。
24. Math.sin() - 参数：number（要计算正弦值的角度）；功能：返回给定角度的正弦值；返回值：正弦值。
25. Math.cos() - 参数：number（要计算余弦值的角度）；功能：返回给定角度的余弦值；返回值：余弦值。
26. Math.tan() - 参数：number（要计算正切值的角度）；功能：返回给定角度的正切值；返回值：正切值。
27. Math.log() - 参数：number（要计算自然对数的数）；功能：返回给定数的自然对数；返回值：自然对数。
28. Math.exp() - 参数：number（要计算e的指数次幂的数）；功能：返回e的指定次幂；返回值：计算结果。
29. Math.PI - 参数：无；功能：返回圆周率π；返回值：π的值。
30. Math.E - 参数：无；功能：返回自然对数的底e；返回值：e的值。
31. decodeURI() - 参数：URI（要解码的URI）；功能：对编码的 URI 进行解码；返回值：解码后的字符串。
32. decodeURIComponent() - 参数：URI（要解码的URI）；功能：对编码的 URI 组件进行解码；返回值：解码后的字符串。
33. encodeURI() - 参数：URI（要编码的URI）；功能：对 URI 进行编码；返回值：编码后的字符串。
34. encodeURIComponent() - 参数：URI（要编码的URI）；功能：对 URI 组件进行编码；返回值：编码后的字符串。
35. JSON.parse() - 参数：jsonString（要解析的JSON字符串）；功能：将 JSON 字符串解析为 JavaScript 对象；返回值：解析后的对象。
36. JSON.stringify() - 参数：value（要序列化为JSON字符串的值）；功能：将值序列化为 JSON 字符串；返回值：序列化后的字符串。
37. setTimeout() - 参数：function（要执行的函数）、delay（延迟时间）；功能：在指定延迟后执行函数；返回值：定时器的唯一标识。
38. clearTimeout() - 参数：timer（要清除的定时器标识）；功能：清除指定的定时器；返回值：undefined。
39. setInterval() - 参数：function（要执行的函数）、interval（时间间隔）；功能：每隔指定时间执行函数；返回值：定时器的唯一标识。
40. clearInterval() - 参数：timer（要清除的定时器标识）；功能：清除指定的定时器；返回值：undefined。
****41. eval() - 参数：code（要执行的代码字符串）；功能：执行指定的代码字符串；返回值：代码执行的结果。（简易版沙箱，例如用户提交的作业代码测试运行）
        可以用来执行动态生成的JS代码，
        或者用来解析JSON字符串将其转化为JavaScript对象
        但存在注入风险。可以考虑使用更安全的替代方法，比如 Function 构造函数或 JSON.parse()。
42. isFinite() - 参数：value（要检查的值）；功能：检查值是否为有限数；返回值：true（是有限数）、false（是无穷大或NaN）。
43. isNaN() - 参数：value（要检查的值）；功能：检查值是否为 NaN；返回值：true（是NaN）、false（不是NaN）。
44. parseFloat() - 参数：string（要转换为浮点数的字符串）；功能：将字符串转换为浮点数；返回值：转换后的浮点数。
45. parseInt() - 参数：string（要转换为整数的字符串）、radix（基数，默认为10）；功能：将字符串转换为整数；返回值：转换后的整数。
46. encodeURI() - 参数：URI（要编码的URI）；功能：对 URI 进行编码；返回值：编码后的字符串。
47. encodeURIComponent() - 参数：URI

*****************************************************************************************
    $("#activity-tbody input[type = 'checkbox']:checked")
jQuery id选择器 父子选择器 过滤器
    #activity-tbody选中该id的标签
        空格input  表示选中该标签下所有子标签，包括直接和间接标签中的input标签
            [type = 'checkbox']   表示使用type类型过滤 类型为checkbox的input标签
                :checked表示再次过滤 checkbox类型的input标签中，属性为checked的标签

jQuery标签选择器选择的结果是一个数组，选择了几个标签，数组中就有几个元素

在页面中给元素添加事件的语法：
    //事件属性与事件函数一一对应
    1、在标签中，使用元素的事件属性添加：
        onClick="function()"
        缺点：html标签与js代码混合，难以维护
    2、使用jQuery对象，给元素添加事件
        $("jQuery选择器").click(function(){
            JS代码;
        });
        局限：只能给固有元素添加事件（不是动态生成的元素，即为调用事件函数添加事件时，元素还未生成，调用后，依据后端返回的数据等条件，动态生成的元素）
                就是当调用事件函数给元素添加事件是，已经在页面上生成了的元素
    3、使用jQuery的on函数，可以给动态元素添加事件（无法确保元素是否为固有元素时，一律采用此方法）
        原理：动态生成的元素（dom对象）无法直接绑定事件，需要借助其外层有效的固有元素来进行事件绑定。
        使用父选择器，选中要添加事件的目标元素的父元素（无论几层），且要求此父元素一定是固有元素（范围越小，目标元素越好找，提高粒度与效率）
        事件类型，与事件属性和事件函数一一对应。即JS代码不变，this等关键字依旧正常使用
        子选择器选中目标元素，与父选择器构成父子选择器
        语法：
        父选择器.on("事件类型", 子选择器, function(){
            JS代码
        });

是否是动态元素，看元素生成的时机，与添加事件代码的执行顺序。
    需要后天相应信息的，通常靠后

***************************************************************************************
myBatis中的DDL语句 增删改 会默认返回影响记录条数
    即为  delete update insert 标签 不可以写 resultMap resultType

传入参数为数组是，条件不可以写 id = #{id}  而是 id in () 遍历数组，拼串传值
    使用foreach标签，遍历数组，返回结果是字符串
    <foreach collection="array" item="id" separator="," open="(" close=")">   也可以遍历 list    separator设置分隔符 open close表示前后缀
        #{id}
    </foreach>
    最后输出为 (xxx,xxx,xxx,...)
    用于sql语句中的 in 关键字后 动态完成批量操作

遍历：JSTL标签库可以遍历作用域中的数据，（结合EL表达式使用，处理作用域中的数据）
    jquery对象用jquery的each函数遍历
    $.each(targetObj, function(index, obj){  //数组下标 每次遍历的dom对象
        this;//等价于obj
        每取出一个元素，执行这个函数
    });

JS中截取字符串 subString(起始下标，结束下标);函数

ajax向后台发送请求时，可以通过data提交参数，格式有三种：
----JS对象（缺点 参数名不可以重复，靠后的会覆盖掉之前的、一一对应、且只能是、字符串格式）
    data:{
        k1:v1,
        k2:v2,
        ...
    }
----data:k1=v1&k2:v2&...
    k1 k2等 优点：key可以重复。注意，后台接收必须与key对应，重复的自动转化为数组
    缺点：需要字符串拼接，且只能是字符串格式
----区别于 字符串格式，对应的是 文件格式，例如图片，视频，音频，word文件等
    data:FormData对象
    优势：可以提交文件，即为二进制数据
    缺点：操作更复杂

************************************************************************
有关后端对前端传来的参数的封装
--如果作为查询条件，优先封装为map对象
--如果作为写数据条件，增改，优先封装为实体类对象
	当参数涉及到多个实体类对象时，可以综合map对象与实体类对象进行封装

******************************************************************************
导出市场活动数据为excel文件，弹出对话框让用户选择目标路径，保存到本地
	给批量导出按钮添加单击事件，向后台发送导出请求
	查询所有的市场活动
	创建一个excel文件，并且把市场活动写到excel文件中（此时这个文件在服务器中生成的）****
	将此excel文件输出到浏览器（文件下载）****

技术准备：
	1、使用java操作excel文件：把数据生成excel文件
		io只可以生成无格式的文本文件，字节码文件，jsp，html等
		excel，word，pdf等属于特殊格式的文件
		excel：页，行，列；字体，颜色，等等
		使用Java的图形化api可以操作。
	  ----引入插件：例如 iText easyExcel apache-poi
		使用办公文档插件使用的基本思想：插件将办公文档的各种元素封装成普通的Java类，
		程序员操作这些Java类，然后插件底层来操作办公文档的元素，程序员不直接操作办公文档。无需了解底层原理
		步骤：生成需要操作的类的实体对象，调用工具方法进行操作。

		poi插件对应的类：
		文件：		HSSFWorkbook
		页：			HSSFSheet
		行：			HSSFRow
		列(单元)：		HSSFCell
		样式：		HSSFCellStyle

	示例：使用apache-poi插件，用Java代码生成excel文件，并写入一定的数据信息，保存到本地磁盘。
	步骤：添加maven依赖
		<groupId>org.apache.poi</groupId>
		<artifactId>poi</artifactid>
		<version>3.15</version>

		//创建HSSFWorkBook对象，对应一个Excel文件
		HSSFWorkbook wb = new HSSFWorkbook();
		//向wb对象中写入内容，首先使用wb对象创建一个页对象，保证对应关系
		HSSFSheet sheet = wb.createSheet("测试列表");
		//向页中写入数据，需要先创建行对象，参数为行号，从0开始，以1递增
		HSSFRow row = sheet.createRow(0);
		//在行中创建列对象，参数为列号，从0开始，以1递增
		HSSFCell cell = row.createCell(0);
		//向cell中存储内容，excel中 cell单元格可以填写的内容具有多种数据格式，类比数据库。
		//有Date double String boolean Calendar等数据类型
		cell.setCellValue("学号");
		//生成样式对象
		HSSFCellStyle style = wb.createCellStyle();
		style.setFont();
		style.setAlignment(HorizontalAlignment.CENTER);
		...
		//将样式应用个cell
		cell.setCellStyle(style);

		以此类推
		行号0，创建列号0、1、2、3...
		行号1，创建列号0、1、2、3...
		分别写入数据
		写入多行，多列，可以使用循环，嵌套for等方法
		也可以添加对应的样式

		//数据写入完成，调用工具函数生成excel文件 可以是File类型，或者OutputStream输出流
		OutputStream stream = new FileOutputStream("目标路径 文件名.xls")；
		//io流需要捕获异常
		wb.write(stream);
		//关闭流资源，HSSFWorkBook资源
		steam.close();
		wb.close();

	2、文件下载：
		属于另一种请求。用户发送下载文件请求，后台将文件处理为流，发送给前端，用户接收下载。
	前端：
		测试用：提供一个按钮，对应添加事件发送请求。
		因为响应信息返回的是文件，所以一定是同步请求。ajax异步只能解析json
		同步请求可以将返回的文件显示到另一个窗口，就可以保持原窗口不变
		同步请求：地址栏，超链接，form表单
		$("#fileDownloadBtn").click(function(){
			window.location.href="url";
		})

	后端：
		Controller接收请求，处理，通常不借助controller方法的返回值来返回
		
		@RequestMapping("url")
		public  void fileDownload(HttpServletResponse response){
			//手动返回文件
			//设置响应类型为 二进制字节流（万能） 区别以前的 text/HTML  文件类型有很多，协议有规定 可以查找 HTTP Context-type对照表
			response.setContentType("application/octet-stream; charset=UTF-8");
			//用服务器 response 获取字节输出流，io异常需要捕获(使用 getWriter 获得的是字符输出流)
			OutputStream out = response.getOutputStream();
			//浏览器接收到响应之后，默认处理是直接在浏览器窗口上进行打开。如果没有相应的应用或内置应用打开，才会激活另存为窗口。
			//设置响应头信息，使浏览器接收到相应信息后，直接激活文件下载窗口，即使可以打开，也取消打开文件。
			response.addHeader("Content-Disposition", "attachment; filename= Text.xls");
			//使用文件输入流，读取服务器硬盘上的要发送给用户的目标excel文件
			InputStream is = FileInputStream("目标文件路径+文件名")；
			//缓冲区，每次读取的字节数，循环，读多少，写多少。类比之前文件复制
			byte[] buff = new byte[256];
			int len = 0;
			while((len = is.read(buff)) != -1){
				out.write(buff, 0, len);
			}
			//关闭资源，out流是由服务器创建并管理的。原则：谁创建谁关闭。out输出流将有服务器进行管理并关闭
			is.close();
			out.flush();
		}

*****************************************************************************
读取固定格式的excel文件，作为上传列表数据，批量插入数据

导入市场活动：（通常实际中会添加前端校验与后端校验，再开始逐行解析，成功解析并写入信息后，返回成功）
	用户上传文件倒服务器：
	回顾：表单组件标签（让用户可以通过这些标签将数据提交给后套）
		例如：input标签(使用type区分 text password radio checkbox hidden button submit reset file )   select标签  textarea标签等
		文件上传form表单：必须满足三个条件：1、表单组件标签只能用：<input type="file" name="myFile"> 
			浏览器支持，会自动添加单击事件。用户点击时，弹出文件选择对话框，读取系统硬盘文件，让用户选择。确认后文件名显示在后面
			2、请求方式必须为 post （主要原因是post向后台提交参数是在请求体，而get放入url中在请求头中）
			3、表单的编码格式只可以使用： multipart/form-data
				根据HTTP协议规定，浏览器每次向后台提交参数，都会统一对参数进行编码，服务器来解码。
				默认采用的编码格式是：urlencoded
				这种编码格式只能对文本数据进行编码
				浏览器每次向后台提交参数，都会首先把所有的参数转换成字符串，然后对这些数据统一进行urlencoded编码，后台解码。
				故此从浏览器发过来的始终是String字符串

		<form action="url" method="post" enctype="multipart/form-data">
			<input type="file" name="myFile"><br>
			<input type="submit" value="提交">
		</form>

		<!--配置文件上传解析器 id必须是 multipartResolver-->
		<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
			<property name="maxUploadSize" value="#{1024*1024*100}"  />   以字节为单位 100mb
			<property name="defaultEncoding" value="utf-8" />
		</bean>

		@RequestMapping("url")
		//返回String 是要浏览器打开的页面路径
		public String fileUpload(String userName, MultipartFile myFile) throws Exception{ // MVC会自动将文件封装倒这个参数中
			//把文件在服务器中指定的目录，生成一个同样的文件。路径必须手动创建好，文件不存在会自动创建
			//这里需要捕获IO异常。并且需要对文件类型进行判断，可以使用模板方法判断文件类型，确定后缀
			//并且文件名需要动态生成便于管理 文件类型可以使用myFile中取出，已经封装好
			//File构造方法有两个，也可以传入两个参数，一个是路径，一个是文件名
			File file = new File("pathname" ,  myFile.getOriginalFilename() + 配置时间戳等);
			myFile.transferTo(file);
			//调用service解析file等等
			excelExplainService.parseExcel(myFile);
			...
			...

			return "url";
		}


解析excel文件：
	使用apachi-poi 解析excel文件
		解析出的数据，调用service 拼接sql 调用 mapper 存入数据库，返回成功或失败

Service层方法：

    //file是从controller中传入的，用户上传的文件
    public List<ExcelData> parseExcel(MultipartFile file) {
        List<ExcelData> dataList = new ArrayList<>();
	//设计IO 捕获异常
        try {
	    //创建输入流
            Workbook workbook = WorkbookFactory.create(file.getInputStream());
	    //获取第一页
            Sheet sheet = workbook.getSheetAt(0);

            // 循环解析Excel数据，遍历所有行
            for (int i = 1; i <= sheet.getLastRowNum(); i++) {
                Row row = sheet.getRow(i);
                ExcelData data = new ExcelData();
		//遍历所有列
                data.setName(row.getCell(0).getStringCellValue());
                data.setValue(row.getCell(1).getNumericCellValue());
                ...
                dataList.add(data);
            }

            // 批量插入数据到数据库中
            excelMapper.batchInsert(dataList);

        } catch (Exception e) {
            e.printStackTrace();
        }
        return dataList;
    }

******************************************************************************
Echarts实现数据可视化图表，统计图表展示
	Echarts是百度开发的

	步骤：下载开发包，是js文件。然后拷贝，并引入项目。
	准备容器div，控制整体
	容器加载完成后，异步向后台发送请求，动态获取所需展示的数据，Json格式
	在ajax的回调函数 success:function(data){
		中调用插件的工具函数
		使用data.参数名 给各个参数赋值
	}
	



































