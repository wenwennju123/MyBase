************************************************************************************************
            JavaSE
************************************************************************************************
常见字符编码：
	ASCII： 'a' ->97  'A' -> 65 '0' ->48
	ISO-8859-1
	GBK
	GB2312
	GB18030
	Big5
	unicode：Java中采用的 统一了全球的文字的编码

char c = 97；
输出字符为 'a'

JDK 开发工具包
JRE 运行时环境
JVM Java虚拟机

编译阶段：编写 .java结尾的源文件 --> 编译器进行编译 javac.exe --> 生成 .class 结尾的字节码文件 -->
	假设class文件名为 A.class 则称 A 为类名
运行阶段：类加载器 --> 装载 --> Java虚拟机 --> 解释器进行解释 --> 操作系统OS 进行操作 --> 硬件平台

编译命令：javac + java源文件路径
运行命令：java + 类名

public 的类有且只能有一个，并且类名与文件名保持一致
多个public类 那就必须对应多个文件
直接写class 可以写在同一个文件中，但是不建议

System.out.Println( i++ );  先输出 i 然后 i自加1
System.out.Println( ++i );  先 i自加1 然后输出 i

if语句 只可能执行其中一个，只要有一个分支执行了，if语句就会结束。如果所有判断条件（布尔表达式）都不满足，则不执行
如果{}大括号中的语句只有一行，则大括号可以省略，不建议因为降低可读性

Switch语句
switch (value) {
	case value1 :
		java...
		break;
	case value2 :
		java...
		break;
	case value3 :
		...
	...

	default :
		java...
}

switch语句支持的值 int String; byte short char 类型的值会被自动转换成这两种类型

switch语句中 value1 和 value2 的相等匹配比较 使用的是 "==" 比较

switch语句的执行原理，
	value 与 value1 比较，相同（true） 则进行该分支，遇到break则结束，
	如果没有遇到break，就会导致case穿透，下一个case便不会比较直接执行，直到遇到break或default
故此，每个case必须对应一个break

转向语句: break return continue
分支语句: if switch
循环语句: if while do..while

for循环语句
for(初始表达式; 布尔表达式; 更新表达式){
	循环体;
}
其中：初始表达式最先执行，且在单次for循环中只执行一次
	条件表达式的结果必须为布尔类型
	更新表达式的作用是控制循环次数

contiue语句 继续进行下次循环，终止当前次的循环，跳过continue语句下的Java语句，直接进行下一次循环

Ctrl + C 强行终止
windows的一些常用dos命令
	cls 清屏
	exit 退出
	ipconfig 查看ip地址  
	ping 查看通信信息
	d:回车 切换盘符
	cd 切换目录
	cd.. 切换到上级
	cd\ 切换到根目录
	dir 查看当前目录下的所有文件
	mkdir 创建目录
	del 删除文件
	Tab 自动补全命令
	方向键 上 下 翻出历史命令

while循环
	while(布尔表达式){
		循环体；
		更新表达式；
	}
原则：先判断布尔表达式，true则进行循环，执行后继续判断，直到布尔表达式为false退出循环

do...while循环
	do{
		循环体；
		更新表达式；
	}while(布尔表达式);
注：不可以漏掉末尾的分号
原则：先执行一次循环体，再进行布尔表达式的判断。循环体至少会被执行一次

转向语句：
	break：用在switch语句中来终止switch语句的执行，防止case穿透
		用在循环语句中用来终止循环。
		break语句会让离它最近一层的循环终止，无法终止方法

这种用法可以用来终止制定的循环
a:for(   ){
	b:for(   ){
		if(   ){
			break a;
		}
	}
}

Java中默认的整数类型是int
	123L  Long类型
	自动类型转换 小 --> 大
	强制类型转换 大 --> 小   会损失精度
	如果整数没超出byte short char 的取值范围 可以直接赋值

Java中默认的浮点类型是double
	float f = 1.0f;
	float f = (float)f;
float 和 double 的空间永远比整数型大

多种数据类型进行混合运算时，Java会将其先转换成容量较大的一种
	byte short char 混合运算时，先各自转换成容量最大的那种再做运算

基本数据类型中，只有boolean不能转换

运算符：
	算数： ++ -- % /
	关系： 布尔型
	逻辑：& | ！ && ||
	条件： 三目      表达式 ？ 表达式1 ： 表达式2
	字符串链接：+  自左向右以此执行
	赋值 =  +=   -=     扩展赋值运算符，运算结果保持原有类型，可能会损失精度。必要时进行强制类型转换
		byte x = 100;
		x += 1000;   损失精度
		x = (byte)(x + 1000)
	位运算符 <<   >>

编程tips：
	布尔标记
	循环中 if条件 标记=false
	输出：.println（ x + （标记 ？ '是' ： '否'））；

****************************************************************************************
方法























************************************************************************************************
            Java高级特性
************************************************************************************************

************************************************************************************************
            JDBC MySQL
************************************************************************************************




































































































































































































































































































































































































































































